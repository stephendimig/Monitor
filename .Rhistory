ylab("Utilization") +
xlab("Date/Time") +
ggtitle("PSBR Binding SBR CPU Usage")
})
output$sessTaskCpuPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
ggplot(df, aes(Date)) +
scale_colour_manual("Utilization", breaks=c("SessionTask0", "SessionTask1", "SessionTask2", "SessionTask3", "RecordAuditTask", "AuditStackEventTask") , values=c("red", "blue", "green", "orange", "purple", "black")) +
geom_line(aes(y = SessionTaskCpu0, colour="SessionTask0")) +
geom_line(aes(y = SessionTaskCpu1, colour="SessionTask1")) +
geom_line(aes(y = SessionTaskCpu2, colour="SessionTask2")) +
geom_line(aes(y = SessionTaskCpu3, colour="SessionTask3")) +
geom_line(aes(y = RecordAuditTaskCpu, colour="RecordAuditTask")) +
geom_line(aes(y = AuditStackEventTaskCpu, colour="AuditStackEventTask")) +
ylab("Utilization") +
xlab("Date/Time") +
ggtitle("PSBR Session SBR CPU Usage")
})
output$caTaskCpuPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
ggplot(df, aes(Date)) +
scale_colour_manual("Utilization", breaks=c("CATcpThread", "CARIngressTask", "CADirectXferThr", "CAREgressTask", "ComAgentTimer", "ComAgtReTx") , values=c("red", "blue", "green", "orange", "purple", "black")) +
geom_line(aes(y = CATcpThread, colour="CATcpThread")) +
geom_line(aes(y = CARIngressTask, colour="CARIngressTask")) +
geom_line(aes(y = CADirectXferThr, colour="CADirectXferThr")) +
geom_line(aes(y = CAREgressTask, colour="CAREgressTask")) +
geom_line(aes(y = ComAgentTimer, colour="ComAgentTimer")) +
geom_line(aes(y = ComAgtReTx, colour="ComAgtReTx")) +
ylab("Utilization") +
xlab("Date/Time") +
ggtitle("PSBR ComAgent Task CPU Usage")
})
output$sisTaskCpuPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
ggplot(df, aes(Date)) +
scale_colour_manual("Utilization", breaks=c("SbrSisTask0", "SbrSisTask1", "SbrSisSendRarTask", "SbrSisRspHandleTask", "SbrInvokeSisSenTask", "SbrInvokeSisRspTask") , values=c("red", "blue", "green", "orange", "purple", "black")) +
geom_line(aes(y = SbrSisTaskCpu0, colour="SbrSisTask0")) +
geom_line(aes(y = SbrSisTaskCpu1, colour="SbrSisTask1")) +
geom_line(aes(y = SbrSisSendRarTaskCpu, colour="SbrSisSendRarTask")) +
geom_line(aes(y = SbrSisRspHandleTaskCpu, colour="SbrSisRspHandleTask")) +
geom_line(aes(y = SbrInvokeSisSenTaskCpu, colour="SbrInvokeSisSenTask")) +
geom_line(aes(y = SbrInvokeSisRspTaskCpu, colour="SbrInvokeSisRspTask")) +
ylab("Utilization") +
xlab("Date/Time") +
ggtitle("PSBR SIS Task CPU Usage")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
readData <- function(startDate=NA, endDate=NA)
{
df <- data.frame()
df <- read.table("psbr_data.txt", sep=";", header=TRUE, stringsAsFactors=FALSE)
df$Date <- as.POSIXlt(df$Date, format="%Y-%m-%d %H:%M:%S")
df$NumPsbrBindingRecs <- as.numeric(df$NumPsbrBindingRecs)
df$NumPsbrSessionRecs  <- as.numeric(df$NumPsbrSessionRecs)
df$AllocInMemorySize <- as.numeric(df$AllocInMemorySize)
df$UsedInMemorySize <- as.numeric(df$UsedInMemorySize)
df$BINDINGTASKQ0 <- as.numeric(df$BINDINGTASKQ0)
df$BINDINGTASKQ1 <- as.numeric(df$BINDINGTASKQ1)
df$BINDINGTASKQ2 <- as.numeric(df$BINDINGTASKQ2)
df$BINDINGTASKQ3 <- as.numeric(df$BINDINGTASKQ3)
df$SESSIONTASKQ0 <- as.numeric(df$SESSIONTASKQ0)
df$SESSIONTASKQ0 <- as.numeric(df$SESSIONTASKQ1)
df$SESSIONTASKQ0 <- as.numeric(df$SESSIONTASKQ2)
df$SESSIONTASKQ0 <- as.numeric(df$SESSIONTASKQ3)
df$ImsiAnchorKeyRecs <- as.numeric(df$ImsiAnchorKeyRecs)
df$ImsiApnAnchorKeyRecs <- as.numeric(df$ImsiApnAnchorKeyRecs)
df$MsisdnAlternateKeyRecs <- as.numeric(df$ImsiApnAnchorKeyRecs)
df$MsisdnApnAlternateKeyRecs <- as.numeric(df$MsisdnApnAlternateKeyRecs)
df$Ipv4AlternateKeyRecs <- as.numeric(df$Ipv4AlternateKeyRecs)
df$Ipv4AlternateKeyV2Recs <- as.numeric(df$Ipv4AlternateKeyV2Recs)
df$Ipv6AlternateKeyRecs <- as.numeric(df$Ipv6AlternateKeyRecs)
df$Ipv6AlternateKeyV2Recs <- as.numeric(df$Ipv6AlternateKeyV2Recs)
df$SessionRecs <- as.numeric(df$SessionRecs)
df$OcSessionRecs <- as.numeric(df$OcSessionRecs)
df$OcClientHostRecs <- as.numeric(df$OcClientHostRecs)
df$IngressStackEventRate <- as.numeric(df$IngressStackEventRate)
df$EgressStackEventRate <- as.numeric(df$EgressStackEventRate)
df$BindingTaskCpu0 <- as.numeric(df$BindingTaskCpu0)
df$BindingTaskCpu1 <- as.numeric(df$BindingTaskCpu1)
df$BindingTaskCpu2 <- as.numeric(df$BindingTaskCpu2)
df$BindingTaskCpu3 <- as.numeric(df$BindingTaskCpu3)
df$RecordAuditTaskCpu <- as.numeric(df$RecordAuditTaskCpu)
df$AuditStackEventTaskCpu <- as.numeric(df$AuditStackEventTaskCpu)
df$CATxUserBundlingRatio <- as.numeric(df$CATxUserBundlingRatio)
df$CATxProvBundlingRatio <- as.numeric(df$CATxProvBundlingRatio)
df$CARxBundlingRatio <- as.numeric(df$CARxBundlingRatio)
df$SessionTaskCpu0 <- as.numeric(df$SessionTaskCpu0)
df$SessionTaskCpu1 <- as.numeric(df$SessionTaskCpu1)
df$SessionTaskCpu2 <- as.numeric(df$SessionTaskCpu2)
df$SessionTaskCpu3 <- as.numeric(df$SessionTaskCpu3)
df$CATcpThread <- as.numeric(df$CATcpThread)
df$CARIngressTask <- as.numeric(df$CARIngressTask)
df$CADirectXferThr <- as.numeric(df$CADirectXferThr)
df$CAREgressTask <- as.numeric(df$CAREgressTask)
df$ComAgentTimer <- as.numeric(df$ComAgentTimer)
df$ComAgtReTx <- as.numeric(df$ComAgtReTx)
df$AlarmMajor <- as.numeric(df$AlarmMajor)
df$AlarmMinor <- as.numeric(df$AlarmMinor)
df$AlarmCrit <- as.numeric(df$AlarmCrit)
df$SbrSisTaskCpu0 <- as.numeric(df$SbrSisTaskCpu0)
df$SbrSisTaskCpu1 <- as.numeric(df$SbrSisTaskCpu1)
df$SbrSisSendRarTaskCpu <- as.numeric(df$SbrSisSendRarTaskCpu)
df$SbrSisRspHandleTaskCpu <- as.numeric(df$SbrSisRspHandleTaskCpu)
df$SbrInvokeSisSenTaskCpu <- as.numeric(df$SbrInvokeSisSenTaskCpu)
df$SbrInvokeSisRspTaskCpu <- as.numeric(df$SbrInvokeSisRspTaskCpu)
df
}
ui <- fluidPage(
fluidRow(
column(6, tags$h3("Start Date/Time")),
column(6, tags$h3("End Date/Time"))
),
fluidRow(
column(6, dateInput(inputId = "startDate",
label = "Start date")),
column(6, dateInput(inputId = "endDate",
label = "End date"))
),
fluidRow(
column(6, sliderInput("startHours",
label = "Hours",
min = 0,
max = 23,
value = 0)),
column(6, sliderInput("endHours",
label = "Hours",
min = 0,
max = 23,
value = 0))
),
fluidRow(
column(6, sliderInput("startMinutes",
label = "Minutes",
min = 0,
max = 59,
value = 0)),
column(6, sliderInput("endMinutes",
label = "Minutes",
min = 0,
max = 59,
value = 0))
),
fluidRow(
column(6, sliderInput("startSeconds",
label = "Seconds",
min = 0,
max = 59,
value = 0)),
column(6, sliderInput("endSeconds",
label = "Seconds",
min = 0,
max = 59,
value = 0))
),
fluidRow(
column(6, verbatimTextOutput("startDateTime")),
column(6, verbatimTextOutput("endDateTime"))
),
fluidRow(
column(6,plotOutput("ramPlot", height = "600px")),
column(6,plotOutput("cpuPlot", height = "600px"))
),
fluidRow(
column(6, plotOutput("bindQPlot", height = "600px")),
column(6, plotOutput("sessionQPlot", height = "600px"))
),
fluidRow(
column(6, plotOutput("idbUsagePlot", height = "600px")),
column(6, plotOutput("recordsPlot", height = "600px"))
),
fluidRow(
column(6, plotOutput("dbCompPlot", height = "600px")),
column(6, plotOutput("caStackEventPlot", height = "600px"))
),
fluidRow(
column(6, plotOutput("auditStackEventPlot", height = "600px")),
column(6, plotOutput("bindTaskCpuPlot", height = "600px"))
),
fluidRow(
column(6, plotOutput("sessTaskCpuPlot", height = "600px")),
column(6, plotOutput("caTaskCpuPlot", height = "600px"))
),
fluidRow(
column(6, plotOutput("sisTaskCpuPlot", height = "600px"))
)
)
server <- function(input, output) {
output$startDateTime <- renderPrint({ startDateTime() })
output$endDateTime <- renderPrint({ endDateTime() })
startDateTime <- function()
{
sprintf("%s %02d:%02d:%02d", input$startDate, input$startHours, input$startMinutes, input$startSeconds)
}
endDateTime <- function()
{
sprintf("%s %02d:%02d:%02d", input$endDate, input$endHours, input$endMinutes, input$endSeconds)
}
output$ramPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
ggplot(df, aes(Date, x=Date, y=Ram)) +
scale_colour_manual("Memory", breaks=c("Ram", "Minor", "Major", "Critical", "Trend"), values=c('blue', 'orange', 'green', 'red', 'brown')) +
geom_line(aes(y = Ram, colour="Ram")) +
geom_hline(aes(yintercept=70, colour="Minor")) +
geom_hline(aes(yintercept=80, colour="Major")) +
geom_hline(aes(yintercept=90, colour="Critical")) +
geom_smooth(aes(colour="Trend"), method="lm", formula=y~x, se=FALSE) +
ylab("Memory Usage") +
xlab("Date/Time") +
ggtitle("PSBR Memory Usage")
})
output$cpuPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
ggplot(df, aes(Date, x=Date, y=Cpu)) +
scale_colour_manual("CPU", breaks=c("Cpu", "Minor", "Major", "Critical", "Trend"), values=c('blue', 'orange', 'green', 'red', 'brown')) +
geom_line(aes(y = Cpu, colour="Cpu")) +
geom_hline(aes(yintercept=60, colour="Minor")) +
geom_hline(aes(yintercept=66, colour="Major")) +
geom_hline(aes(yintercept=72, colour="Critical")) +
geom_smooth(aes(colour="Trend"), method="lm", formula=y~x, se=FALSE) +
ylab("CPU Usage") +
xlab("Date/Time") +
ggtitle("PSBR CPU Usage")
})
output$bindQPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
ggplot(df, aes(Date)) +
scale_colour_manual("Resource", breaks=c("BINDINGTASKQ0", "BINDINGTASKQ1", "BINDINGTASKQ2", "BINDINGTASKQ3"), values=c('red', 'orange', 'yellow', 'blue')) +
geom_line(aes(y = BINDINGTASKQ0, colour="BINDINGTASKQ0")) +
geom_line(aes(y = BINDINGTASKQ1, colour="BINDINGTASKQ1")) +
geom_line(aes(y = BINDINGTASKQ2, colour="BINDINGTASKQ2")) +
geom_line(aes(y = BINDINGTASKQ3, colour="BINDINGTASKQ3")) +
ylab("Utilization") +
xlab("Date/Time") +
ggtitle("PSBR Binding Queue Depths")
})
output$sessionQPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
ggplot(df, aes(Date)) +
scale_colour_manual("Resource", breaks=c("SESSIONTASKQ0", "SESSIONTASKQ1", "SESSIONTASKQ2", "SESSIONTASKQ3"), values=c('red', 'orange', 'yellow', 'blue')) +
geom_line(aes(y = SESSIONTASKQ0, colour="SESSIONTASKQ0")) +
geom_line(aes(y = SESSIONTASKQ1, colour="SESSIONTASKQ1")) +
geom_line(aes(y = SESSIONTASKQ2, colour="SESSIONTASKQ2")) +
geom_line(aes(y = SESSIONTASKQ3, colour="SESSIONTASKQ3")) +
ylab("Utilization") +
xlab("Date/Time") +
ggtitle("PSBR Session Queue Depths")
})
output$idbUsagePlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
types <- c("Allocated", "Used")
values <- c(mean(df$AllocInMemorySize), mean(df$UsedInMemorySize))
mydf <- data.frame(types, values)
names(mydf) <- c("Type", "Value")
mydf <- mydf[mydf$Value !=0, ]
ggplot(mydf, aes(x=factor(Type), y=Value, fill=Type)) + geom_bar(stat = "identity") +
ylab("Memory Usage") +
xlab("Date/Time") +
ggtitle("PSBR IDB Memory Usage")
})
output$recordsPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
types <- c("Session", "Binding")
values <- c(mean(df$NumPsbrSessionRecs), mean(df$NumPsbrBindingRecs))
mydf <- data.frame(types, values)
names(mydf) <- c("Type", "Value")
mydf <- mydf[mydf$Value !=0, ]
ggplot(mydf, aes(x=factor(Type), y=Value, fill=Type)) + geom_bar(stat = "identity") +
ylab("Number Records") +
xlab("Date/Time") +
ggtitle("PSBR Session/Binding record size")
})
output$dbCompPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
types <- c("ImsiAnchor", "ImsiApnAnchor", "MsisdnAlt", "MsisdnApnAlt", "Ipv4Alt", "Ipv4AltV2", "Ipv6Alt", "Ipv6AltV2", "Session", "OcSession", "OcClientHost")
values <- c(mean(df$ImsiAnchorKeyRecs), mean(df$ImsiApnAnchorKeyRecs), mean(df$MsisdnAlternateKeyRecs), mean(df$MsisdnApnAlternateKeyRecs), mean(df$Ipv4AlternateKeyRecs), mean(df$Ipv4AlternateKeyV2Recs), mean(df$Ipv6AlternateKeyRecs), mean(df$Ipv6AlternateKeyV2Recs), mean(df$SessionRecs), mean(df$OcSessionRecs), mean(df$OcClientHostRecs))
mydf <- data.frame(types, values)
names(mydf) <- c("Type", "Value")
mydf <- mydf[mydf$Value !=0, ]
ggplot(mydf, aes(x=factor(Type), y=Value, fill=Type)) +
geom_bar(stat = "identity") +
ylab("Number of Records") +
xlab("Table") +
ggtitle("PSBR Database Composition")
})
output$caStackEventPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
ggplot(df, aes(Date)) +
scale_colour_manual("Rate", breaks=c("Ingress", "Egress",  "IngressMean", "EgressMean"), values=c("red", "blue", "orange", "purple")) +
geom_line(aes(y = IngressStackEventRate, colour="Ingress")) +
geom_line(aes(y = EgressStackEventRate, colour="Egress")) +
geom_hline(aes(yintercept=mean(df$IngressStackEventRate, na.rm=TRUE), colour="IngressMean")) +
geom_hline(aes(yintercept=mean(df$EgressStackEventRate, na.rm=TRUE), colour="EgressMean")) +
ylab("Rate") +
xlab("Date/Time") +
ggtitle("PSBR ComAgent Stack Event Rates")
})
output$auditStackEventPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
ggplot(df, aes(Date)) +
scale_colour_manual("Rate", breaks=c("Audit", "Mean"), values=c("red", "blue")) +
geom_line(aes(y = TxSbrAuditSEReqSent, colour="Audit")) +
geom_hline(aes(yintercept=mean(df$TxSbrAuditSEReqSent, na.rm=TRUE), colour="Mean")) +
ylab("Rate") +
xlab("Date/Time") +
ggtitle("PSBR Audit Stack Event Rate")
})
output$bindTaskCpuPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
ggplot(df, aes(Date)) +
scale_colour_manual("Utilization", breaks=c("BindingTask0", "BindingTask1", "BindingTask2", "BindingTask3", "RecordAuditTask", "AuditStackEventTask") , values=c("red", "blue", "green", "orange", "purple", "black")) +
geom_line(aes(y = BindingTaskCpu0, colour="BindingTask0")) +
geom_line(aes(y = BindingTaskCpu1, colour="BindingTask1")) +
geom_line(aes(y = BindingTaskCpu2, colour="BindingTask2")) +
geom_line(aes(y = BindingTaskCpu3, colour="BindingTask3")) +
geom_line(aes(y = RecordAuditTaskCpu, colour="RecordAuditTask")) +
geom_line(aes(y = AuditStackEventTaskCpu, colour="AuditStackEventTask")) +
ylab("Utilization") +
xlab("Date/Time") +
ggtitle("PSBR Binding SBR CPU Usage")
})
output$sessTaskCpuPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
ggplot(df, aes(Date)) +
scale_colour_manual("Utilization", breaks=c("SessionTask0", "SessionTask1", "SessionTask2", "SessionTask3", "RecordAuditTask", "AuditStackEventTask") , values=c("red", "blue", "green", "orange", "purple", "black")) +
geom_line(aes(y = SessionTaskCpu0, colour="SessionTask0")) +
geom_line(aes(y = SessionTaskCpu1, colour="SessionTask1")) +
geom_line(aes(y = SessionTaskCpu2, colour="SessionTask2")) +
geom_line(aes(y = SessionTaskCpu3, colour="SessionTask3")) +
geom_line(aes(y = RecordAuditTaskCpu, colour="RecordAuditTask")) +
geom_line(aes(y = AuditStackEventTaskCpu, colour="AuditStackEventTask")) +
ylab("Utilization") +
xlab("Date/Time") +
ggtitle("PSBR Session SBR CPU Usage")
})
output$caTaskCpuPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
ggplot(df, aes(Date)) +
scale_colour_manual("Utilization", breaks=c("CATcpThread", "CARIngressTask", "CADirectXferThr", "CAREgressTask", "ComAgentTimer", "ComAgtReTx") , values=c("red", "blue", "green", "orange", "purple", "black")) +
geom_line(aes(y = CATcpThread, colour="CATcpThread")) +
geom_line(aes(y = CARIngressTask, colour="CARIngressTask")) +
geom_line(aes(y = CADirectXferThr, colour="CADirectXferThr")) +
geom_line(aes(y = CAREgressTask, colour="CAREgressTask")) +
geom_line(aes(y = ComAgentTimer, colour="ComAgentTimer")) +
geom_line(aes(y = ComAgtReTx, colour="ComAgtReTx")) +
ylab("Utilization") +
xlab("Date/Time") +
ggtitle("PSBR ComAgent Task CPU Usage")
})
output$sisTaskCpuPlot <- renderPlot({
startDate <- as.POSIXlt(startDateTime(), format="%Y-%m-%d %H:%M:%S")
endDate <- as.POSIXlt(endDateTime(), format="%Y-%m-%d %H:%M:%S")
df <- readData(startDate, endDate)
ggplot(df, aes(Date)) +
scale_colour_manual("Utilization", breaks=c("SbrSisTask0", "SbrSisTask1", "SbrSisSendRarTask", "SbrSisRspHandleTask", "SbrInvokeSisSenTask", "SbrInvokeSisRspTask") , values=c("red", "blue", "green", "orange", "purple", "black")) +
geom_line(aes(y = SbrSisTaskCpu0, colour="SbrSisTask0")) +
geom_line(aes(y = SbrSisTaskCpu1, colour="SbrSisTask1")) +
geom_line(aes(y = SbrSisSendRarTaskCpu, colour="SbrSisSendRarTask")) +
geom_line(aes(y = SbrSisRspHandleTaskCpu, colour="SbrSisRspHandleTask")) +
geom_line(aes(y = SbrInvokeSisSenTaskCpu, colour="SbrInvokeSisSenTask")) +
geom_line(aes(y = SbrInvokeSisRspTaskCpu, colour="SbrInvokeSisRspTask")) +
ylab("Utilization") +
xlab("Date/Time") +
ggtitle("PSBR SIS Task CPU Usage")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
shinyApp(ui = ui, server = server)
load("app2.R")
source("app2.R")
source("app2.R")
source("app2.R")
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
?runif
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
?nrows
?nRows
?nrow
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
shinyApp(ui = ui, server = server)
source("app2.R")
source("app.R")
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
list.files()
list.files()
source("app.R")
shinyApp(ui = ui, server = server)
source("app.R")
shinyApp(ui = ui, server = server)
